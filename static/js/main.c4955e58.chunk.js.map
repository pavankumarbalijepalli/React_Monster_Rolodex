{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","username","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GACjB,OAGI,cAFA,CAEA,OAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAKN,EAAMI,QAAQG,SACnB,kCAAKP,EAAMI,QAAQI,SAAnB,WCPCC,EAAW,SAACT,GACrB,OACA,qBAAKC,UAAU,YAAf,SAIQD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCPhDO,G,YAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,uBACAb,UAAU,SACVc,SAAUD,EACVE,KAAK,SACLH,YAAaA,MCuDNI,E,kDAtDb,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJJ,E,qDAYb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAQzC,WAGE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YAOXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GACrC,OAAOA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAE3D,OACE,sBAAK/B,UAAU,MAAf,UAEE,oBAAIA,UAAU,QAAd,6BAIA,cAAC,EAAD,CAAWY,YAAY,iBAAiBC,aAAee,KAAKf,eAI5D,cAAC,EAAD,CAAUJ,SAAYoB,W,GAnDZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c4955e58.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return(\n        //  Here for each monster, \n        // we give its name, email id, and an image based on its id\n        <div className='card-container'>\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n            <h2> { props.monster.name } </h2>\n            <p> {props.monster.email }</p>   \n            <p> {props.monster.username} </p>\n        </div>\n    )\n}","import React from \"react\";\nimport './card-list.styles.css'\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    return (\n    <div className='card-list'>\n        {\n            // Here we map the array of monsters\n            // and print out Card component for each item.\n            props.monsters.map(monster => <Card key={monster.id} monster = {monster}/>)\n        }\n    </div>\n    )\n}","import React from \"react\";\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange}) => {\n    return(\n        <input \n        className='search' \n        onChange={handleChange} \n        type='search' \n        placeholder={placeholder}/>\n    )\n}","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n// Component as a class\nclass App extends Component{\n\n  //  We declare our state here. We have the list of monsters \n  // and the searchField value for filtering the monsters\n  constructor(){\n    super()\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  // Getting information from external API using promise.\n  // We use 'componentDidMount' function and we setState with the retrieved data.\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  //  Render function will return JSX code which looks like HTML code\n  render(){\n\n    // We make a constant copy of our state which can be used later\n    const {monsters, searchField} = this.state\n\n    // This is the final set of monsters that will be rendered.\n    // It is called everytime the dom is rendered,\n    // which is whenever the search bar value is changed.\n\n    // We take the constant copy of our state and filter based on the search value.\n    const filteredMonsters = monsters.filter(monster => {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        {/* Title */}\n        <h1 className='title'>Monster Rolodex</h1>\n\n        {/* This line will call change the state and \n        calls the render function with new searchField value*/}\n        <SearchBox placeholder='Monster Search' handleChange= {this.handleChange}/>\n         \n         {/* We render the filtered Monsters which has the \n         copy of monsters from original state.*/}\n        <CardList monsters = {filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\n// exporting the Component\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}